/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package chatudp;

import java.awt.Color;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.sound.sampled.*;
import javax.swing.JOptionPane;

/**
 *
 * @author Glen
 */
public class UDPChatJFrame extends javax.swing.JFrame {

    UDPServer udpserver;
    UDPClient udpclient;
    GameServer gameserver;
    public static int[][] gameBoard; 
    String piece="X";
    String play;
    static Socket clientSocket;
    int gamePort;
    int serverPort;
    String address;
    String move;
    static DataOutputStream sendOut;
    static String opponent="O";
    static int coin;
    static Random decider= new Random();
    
    
    
    /**
     * Creates new form UDPChatJFrame
     */
    public UDPChatJFrame() {
        initComponents();
        gameBoard = new int[3][3];
        jLabel6.setText("DISCONNECTED");
        jLabel6.setForeground(Color.red);
        lock();
        for(int i=0;i<gameBoard.length;i++){
            for(int j = 0; j<gameBoard.length;j++){
                gameBoard[i][j] = 0;
            }
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chatTextBox = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        chatArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        server1PortTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        server2PortTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        connectButton = new javax.swing.JButton();
        newGame = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        b1 = new javax.swing.JButton();
        b2 = new javax.swing.JButton();
        b4 = new javax.swing.JButton();
        b3 = new javax.swing.JButton();
        b5 = new javax.swing.JButton();
        b6 = new javax.swing.JButton();
        b7 = new javax.swing.JButton();
        b8 = new javax.swing.JButton();
        b9 = new javax.swing.JButton();
        startButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        chatArea.setEditable(false);
        chatArea.setColumns(20);
        chatArea.setRows(5);
        chatArea.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane1.setViewportView(chatArea);

        jLabel1.setText("Server1");

        jLabel2.setText("Server2");

        jLabel3.setText("Name:");

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        newGame.setText("New Game");
        newGame.setEnabled(false);
        newGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameActionPerformed(evt);
            }
        });

        jLabel4.setText(" ");

        jLabel5.setText("Status:");

        jLabel6.setText(" ");

        b1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b1ActionPerformed(evt);
            }
        });

        b2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b2ActionPerformed(evt);
            }
        });

        b4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b4ActionPerformed(evt);
            }
        });

        b3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b3ActionPerformed(evt);
            }
        });

        b5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b5ActionPerformed(evt);
            }
        });

        b6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b6ActionPerformed(evt);
            }
        });

        b7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b7ActionPerformed(evt);
            }
        });

        b8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b8ActionPerformed(evt);
            }
        });

        b9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b9ActionPerformed(evt);
            }
        });

        startButton.setText("Start");
        startButton.setEnabled(false);
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(server1PortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addGap(2, 2, 2)
                        .addComponent(server2PortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(connectButton)
                        .addGap(134, 134, 134)
                        .addComponent(jLabel4)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chatTextBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(newGame)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(startButton)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(sendButton)
                                            .addComponent(b4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b7, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(b1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(b2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(b3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(b5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(b6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(b8, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(b9, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(0, 0, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(server1PortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(server2PortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectButton)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(b2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(b1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(b3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(b4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(b5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(b6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(b7, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(b8, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(b9, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(newGame)
                            .addComponent(startButton))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chatTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sendButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed

        address = JOptionPane.showInputDialog("Please enter the host number you wish to connect to:");
        try{
        udpserver = new UDPServer(Integer
                .parseInt(server1PortTextField.getText()));
        udpclient = new UDPClient(nameTextField.getText(),Integer
                .parseInt(server2PortTextField.getText()), address);
        gameserver = new GameServer(Integer
                    .parseInt(server1PortTextField.getText()));
            
            
        server1PortTextField.setEditable(false);
        server2PortTextField.setEditable(false);
        nameTextField.setEditable(false);
        connectButton.setEnabled(false);
        newGame.setEnabled(true);
        gameserver.start();
        udpserver.start();
        udpclient.start();
        }catch(Exception e){
            JOptionPane.showMessageDialog(null,"Please enter valid port numbers, and a valid host!");
        }
    }//GEN-LAST:event_connectButtonActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        try {
            try {
                udpclient.sendMessage();        // TODO add your handling code here:
            } catch (    IllegalBlockSizeException | BadPaddingException | InterruptedException ex) {
                Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (IOException | ClassNotFoundException ex) {
            System.out.println(ex.toString());
        }
    }//GEN-LAST:event_sendButtonActionPerformed

    private void b1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b1ActionPerformed
        
            gameBoard[0][0] = 1;
            
            UDPChatJFrame.b1.setText(piece);
            UDPChatJFrame.b1.setEnabled(false);
            move = "b1\n";
        try {
            sendOut.writeBytes(move);
        } catch (IOException ex) {
            Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
            
            if (eipcWin())
            {
                try {
                    setButtonsNull();
                    
                    JOptionPane.showMessageDialog(null,"You Win!");
                    newGame.setEnabled(true);
                    jLabel6.setText("DISCONNECTED");
                    jLabel6.setForeground(Color.red);        
                    clientSocket.close();
                    establishNewConnection();
                }
                catch (IOException ex) {
                    Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
            else if (isDraw())
            {
                try {
                    setButtonsNull();
                    JOptionPane.showMessageDialog(null,"Draw!!");
                    newGame.setEnabled(true);
                    jLabel6.setText("DISCONNECTED");
                    jLabel6.setForeground(Color.red);
        
                    clientSocket.close();
                    establishNewConnection();
                }
                // TODO add your handling code here:
                catch (IOException ex) {
                    Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else if (epicLose())
                establishNewConnection();
            else{
                lock();
            }
    }//GEN-LAST:event_b1ActionPerformed

    private void b2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b2ActionPerformed
        
            gameBoard[0][1] = 1;
            
            UDPChatJFrame.b2.setText(piece);
            UDPChatJFrame.b2.setEnabled(false);
            move = "b2\n";
        try {
            sendOut.writeBytes(move);
        } catch (IOException ex) {
            Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
            
            if (eipcWin())
            {
            try {
                newGame.setEnabled(true);
                setButtonsNull();
                
                JOptionPane.showMessageDialog(null,"You Win!");
                
                newGame.setEnabled(true);
                jLabel6.setText("DISCONNECTED");
                jLabel6.setForeground(Color.red);
        
                clientSocket.close();
                establishNewConnection();
            } catch (IOException ex) {
                Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
            else if (isDraw())
            {
                try {
                    setButtonsNull();
                    JOptionPane.showMessageDialog(null,"Draw!!");
                    newGame.setEnabled(true);
                    jLabel6.setText("DISCONNECTED");
                    jLabel6.setForeground(Color.red);
        
                    clientSocket.close();
                    establishNewConnection();
                }
                // TODO add your handling code here:
                catch (IOException ex) {
                    Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
              else if (epicLose())
                establishNewConnection();
              else{
                  lock();
            }// TODO add your handling code here:
    }//GEN-LAST:event_b2ActionPerformed
      
    private void b3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b3ActionPerformed
        try {
            gameBoard[0][2] = 1;
            
            UDPChatJFrame.b3.setText(piece);
            UDPChatJFrame.b3.setEnabled(false);
            move = "b3\n"; 
            sendOut.writeBytes(move);

                       
            if (eipcWin())
            {
                try {
                    setButtonsNull();
                    JOptionPane.showMessageDialog(null,"You Win!");
                    
                    newGame.setEnabled(true);
                    jLabel6.setText("DISCONNECTED");
                    jLabel6.setForeground(Color.red);
        
                    clientSocket.close();
                    establishNewConnection();
                }
                // TODO add your handling code here:
                catch (IOException ex) {
                    Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else if (isDraw())
            {
                try {
                    setButtonsNull();
                    JOptionPane.showMessageDialog(null,"Draw!!");
                    newGame.setEnabled(true);
                    jLabel6.setText("DISCONNECTED");
                    jLabel6.setForeground(Color.red);
        
                    clientSocket.close();
                    establishNewConnection();
                }
                // TODO add your handling code here:
                catch (IOException ex) {
                    Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else if(epicLose())
                establishNewConnection();
            else{
                lock();
            }
        } catch (IOException ex) {
            Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
       
    }//GEN-LAST:event_b3ActionPerformed

    private void b4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b4ActionPerformed

            gameBoard[1][0] = 1;
            
            UDPChatJFrame.b4.setText(piece);
            UDPChatJFrame.b4.setEnabled(false);
            move = "b4\n";
        try {
            sendOut.writeBytes(move);
        } catch (IOException ex) {
            Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
            if (eipcWin())
            {
                try {
                    setButtonsNull();
                    
           
           
                    JOptionPane.showMessageDialog(null,"You Win!");
                    newGame.setEnabled(true);
                    jLabel6.setText("DISCONNECTED");
                    jLabel6.setForeground(Color.red);
        
                    clientSocket.close();
                    establishNewConnection();
                }
                // TODO add your handling code here:
                catch (IOException ex) {
                    Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
        }
            else if (isDraw())
            {
                try {
                    setButtonsNull();
                    JOptionPane.showMessageDialog(null,"Draw!!");
                    newGame.setEnabled(true);
                    jLabel6.setText("DISCONNECTED");
                    jLabel6.setForeground(Color.red);
        
                    clientSocket.close();
                    establishNewConnection();
                }
                // TODO add your handling code here:
                catch (IOException ex) {
                    Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else if(epicLose())
                establishNewConnection();
            else{
                lock();
            }// TODO add your handling code here:
    }//GEN-LAST:event_b4ActionPerformed

    private void b5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b5ActionPerformed

            gameBoard[1][1] = 1;
           
             UDPChatJFrame.b5.setText(piece);
             UDPChatJFrame.b5.setEnabled(false);
             move = "b5\n";    
        try {
            sendOut.writeBytes(move);
        } catch (IOException ex) {
            Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
             if (eipcWin())
             {
                 try {
                     setButtonsNull();
                    
                     JOptionPane.showMessageDialog(null,"You Win!");
                     newGame.setEnabled(true);
                     jLabel6.setText("DISCONNECTED");
                    jLabel6.setForeground(Color.red);
        
                     clientSocket.close();
                     establishNewConnection();
                 }
            catch (IOException ex) {
                Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }             
                 // TODO add your handling code here:
              
        // TODO add your handling code here:
    }//GEN-LAST:event_b5ActionPerformed
     else if (isDraw())
            {
                try {
                    setButtonsNull();
                    JOptionPane.showMessageDialog(null,"Draw!!");
                    newGame.setEnabled(true);
                    jLabel6.setText("DISCONNECTED");
                    jLabel6.setForeground(Color.red);
        
                    clientSocket.close();
                    establishNewConnection();
                }
                // TODO add your handling code here:
                catch (IOException ex) {
                    Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }            
     else if(epicLose())
                establishNewConnection();
     else{ 
             lock();
     }
    }
    
    private void b6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b6ActionPerformed
        gameBoard[1][2] = 1;
        
        UDPChatJFrame.b6.setText(piece);
        UDPChatJFrame.b6.setEnabled(false);
        
            move = "b6\n"; 
        try {
            sendOut.writeBytes(move);
        } catch (IOException ex) {
            Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (eipcWin())
        {
            try {
                setButtonsNull();
                
                JOptionPane.showMessageDialog(null,"You Win!");
                newGame.setEnabled(true);
                jLabel6.setText("DISCONNECTED");
                jLabel6.setForeground(Color.red);
        
                clientSocket.close();
                establishNewConnection();
            }
            // TODO add your handling code here:
            catch (IOException ex) {
                Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else if (isDraw())
            {
                try {
                    setButtonsNull();
                    JOptionPane.showMessageDialog(null,"Draw!!");
                    newGame.setEnabled(true);
                    jLabel6.setText("DISCONNECTED");
                    jLabel6.setForeground(Color.red);
                    clientSocket.close();
                    establishNewConnection();
                }
                // TODO add your handling code here:
                catch (IOException ex) {
                    Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        else if(epicLose())
                establishNewConnection();
        else{
                    lock();
        }// TODO add your handling code here:
    }//GEN-LAST:event_b6ActionPerformed

    private void b7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b7ActionPerformed
        gameBoard[2][0] = 1;
        
        UDPChatJFrame.b7.setText(piece);
        UDPChatJFrame.b7.setEnabled(false);
        move = "b7\n";
        try {
            sendOut.writeBytes(move);
        } catch (IOException ex) {
            Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (eipcWin())
        {
            try {
                setButtonsNull();
                
                JOptionPane.showMessageDialog(null,"You Win!");
                newGame.setEnabled(true);
                jLabel6.setText("DISCONNECTED");
                jLabel6.setForeground(Color.red);
                clientSocket.close();
                establishNewConnection();
            }
            // TODO add your handling code here:
            catch (IOException ex) {
                Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else if (isDraw())
            {
                try {
                    setButtonsNull();
                    JOptionPane.showMessageDialog(null,"Draw!!");
                    newGame.setEnabled(true);
                    jLabel6.setText("DISCONNECTED");
                    jLabel6.setForeground(Color.red);
                    clientSocket.close();
                    establishNewConnection();
                }
                // TODO add your handling code here:
                catch (IOException ex) {
                    Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        else if(epicLose())
                establishNewConnection();
        else{
            lock();
        }// TODO add your handling code here:
    }//GEN-LAST:event_b7ActionPerformed

    private void b8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b8ActionPerformed
        gameBoard[2][1] = 1;
        
        UDPChatJFrame.b8.setText(piece);
        UDPChatJFrame.b8.setEnabled(false);
        move = "b8\n";
        try {
            sendOut.writeBytes(move);
        } catch (IOException ex) {
            Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (eipcWin())
        {
            try {
                setButtonsNull();
                
                JOptionPane.showMessageDialog(null,"You Win!");
                newGame.setEnabled(true);
                jLabel6.setText("DISCONNECTED");
                jLabel6.setForeground(Color.red);
                clientSocket.close();
                establishNewConnection();
            }
            // TODO add your handling code here:
            catch (IOException ex) {
                Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else if (isDraw())
            {
                try {
                    setButtonsNull();
                    JOptionPane.showMessageDialog(null,"Draw!!");
                    newGame.setEnabled(true);
                    jLabel6.setText("DISCONNECTED");
                    jLabel6.setForeground(Color.red);
                    clientSocket.close();
                    establishNewConnection();
                }
                // TODO add your handling code here:
                catch (IOException ex) {
                    Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        else if(epicLose())
                establishNewConnection();
        else{
            lock();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_b8ActionPerformed

    private void b9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b9ActionPerformed
        gameBoard[2][2] = 1;
        
        UDPChatJFrame.b9.setText(piece);
        UDPChatJFrame.b9.setEnabled(false);
        move = "b9\n";
        try {
            sendOut.writeBytes(move);
        } catch (IOException ex) {
            Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (eipcWin())
        {
            try {
                setButtonsNull();
                
                
                JOptionPane.showMessageDialog(null,"You Win!");
                newGame.setEnabled(true);
                jLabel6.setText("DISCONNECTED");
                jLabel6.setForeground(Color.red);
                clientSocket.close();
                establishNewConnection();
            }
            // TODO add your handling code here:
            catch (IOException ex) {
                Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else if (isDraw())
            {
                try {
                    setButtonsNull();
                    JOptionPane.showMessageDialog(null,"Draw!!");
                    newGame.setEnabled(true);
                    jLabel6.setText("DISCONNECTED");
                    jLabel6.setForeground(Color.red);
                    clientSocket.close();
                    establishNewConnection();
                }
                // TODO add your handling code here:
                catch (IOException ex) {
                    Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }            
        else if(epicLose())
                establishNewConnection();
        else
        {
            lock();
        }// TODO add your handling code here:
    }//GEN-LAST:event_b9ActionPerformed

    private void newGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameActionPerformed
            try {
            readyNewGame();
            
            coin = decider.nextInt(1000);
            System.out.println(coin);
            
            clientSocket = new Socket(address, Integer
                    .parseInt(server2PortTextField.getText())); 

            sendOut = new DataOutputStream(clientSocket.getOutputStream());
            
            
            newGame.setEnabled(false);
            startButton.setEnabled(true);
            
        }
                    catch (UnknownHostException ex) {
            JOptionPane.showMessageDialog(null,"Please wait for your opponent to start their server!");
            setButtonsNull();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null,"Please wait for your opponent to start their server!");
            setButtonsNull();
        }
        
    }//GEN-LAST:event_newGameActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
            playSound("Hadoken.wav");     
            String stringCoin = Integer.toString(coin);
        try {
            sendOut.writeBytes(stringCoin+"\n");
            
        } catch (IOException ex) {
            Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        startButton.setEnabled(false);
        unlock();
    }//GEN-LAST:event_startButtonActionPerformed

    
    private static void lockStart(){
        startButton.setEnabled(false);
    }
    private static void lock(){
        b1.setEnabled(false);
        b2.setEnabled(false);
        b3.setEnabled(false);
        b4.setEnabled(false);
        b5.setEnabled(false);
        b6.setEnabled(false);
        b7.setEnabled(false);
        b8.setEnabled(false);
        b9.setEnabled(false);
    }
    
    public static void unlock(){
        if(gameBoard[0][0] == 0){
            b1.setEnabled(true);
        }
        if(gameBoard[0][1] == 0){
            b2.setEnabled(true);
        }
        if(gameBoard[0][2] == 0){
            b3.setEnabled(true);
        }
        if(gameBoard[1][0] == 0){
            b4.setEnabled(true);
        }
        if(gameBoard[1][1] == 0){
           b5.setEnabled(true);
        }
        if(gameBoard[1][2] == 0){
            b6.setEnabled(true);
        }
        if(gameBoard[2][0] == 0){
            b7.setEnabled(true);
        }
        if(gameBoard[2][1] == 0){
            b8.setEnabled(true);
        }
        if(gameBoard[2][2] == 0){
            b9.setEnabled(true);
        }
        
    }
    
    private boolean eipcWin(){
       if((gameBoard[0][0]==1&&gameBoard[0][1]==1&&gameBoard[0][2]==1)){
           
           b1.setBackground(Color.red);
           b2.setBackground(Color.red);
           b3.setBackground(Color.red);
           return true;
       }
       else if((gameBoard[1][0]==1&&gameBoard[1][1]==1&&gameBoard[1][2]==1)){
           b4.setBackground(Color.red);
           b5.setBackground(Color.red);
           b6.setBackground(Color.red);
           return true;
       }
       else if((gameBoard[2][0]==1&&gameBoard[2][1]==1&&gameBoard[2][2]==1)){
           b7.setBackground(Color.red);
           b8.setBackground(Color.red);
           b9.setBackground(Color.red);
           return true;
       }
       else if((gameBoard[0][0]==1&&gameBoard[1][1]==1&&gameBoard[2][2]==1)){
           b1.setBackground(Color.red);
           b5.setBackground(Color.red);
           b9.setBackground(Color.red);
           return true;
       }
       else if((gameBoard[0][2]==1&&gameBoard[1][1]==1&&gameBoard[2][0]==1)){
           b3.setBackground(Color.red);
           b5.setBackground(Color.red);
           b7.setBackground(Color.red);
           return true;
       }
       else if((gameBoard[0][0]==1&&gameBoard[1][0]==1&&gameBoard[2][0]==1)){
           b1.setBackground(Color.red);
           b4.setBackground(Color.red);
           b7.setBackground(Color.red);
           return true;
       }
       else if((gameBoard[0][1]==1&&gameBoard[1][1]==1&&gameBoard[2][1]==1)){
           b2.setBackground(Color.red);
           b5.setBackground(Color.red);
           b8.setBackground(Color.red);
           return true;
       }
       else if((gameBoard[0][2]==1&&gameBoard[1][2]==1&&gameBoard[2][2]==1)){
           b3.setBackground(Color.red);
           b6.setBackground(Color.red);
           b9.setBackground(Color.red);
           return true;
       }
       else{
        return false; 
       }
    }
    
    private static boolean epicLose(){
       if((gameBoard[0][0]==2&&gameBoard[0][1]==2&&gameBoard[0][2]==2)){
           return true;
       }
       else if((gameBoard[1][0]==2&&gameBoard[1][1]==2&&gameBoard[1][2]==2)){
           return true;
       }
       else if((gameBoard[2][0]==2&&gameBoard[2][1]==2&&gameBoard[2][2]==2)){
           return true;
       }
       else if((gameBoard[0][0]==2&&gameBoard[1][1]==2&&gameBoard[2][2]==2)){
           return true;
       }
       else if((gameBoard[0][2]==2&&gameBoard[1][1]==2&&gameBoard[2][0]==2)){
           return true;
       }
       else if((gameBoard[0][0]==2&&gameBoard[1][0]==2&&gameBoard[2][0]==2)){
           return true;
       }
       else if((gameBoard[0][1]==2&&gameBoard[1][1]==2&&gameBoard[2][1]==2)){
           return true;
       }
       else if((gameBoard[0][2]==2&&gameBoard[1][2]==2&&gameBoard[2][2]==2)){
           return true;
       }
       else{
        return false; 
       }
    }
    
    private void readyNewGame(){
        for(int i=0;i<gameBoard.length;i++){
            for(int j = 0; j<gameBoard.length;j++){
                gameBoard[i][j] = 0;
            }
        }
        //b1.setEnabled(true);
        b1.setText(" ");
        b1.setBackground(Color.lightGray);
        //b2.setEnabled(true);
        b2.setText(" ");
        b2.setBackground(Color.lightGray);
        //b3.setEnabled(true);
        b3.setText(" ");
        b3.setBackground(Color.lightGray);
        //b4.setEnabled(true);
        b4.setText(" ");
        b4.setBackground(Color.lightGray);
        //b5.setEnabled(true);
        b5.setText(" ");
        b5.setBackground(Color.lightGray);
        //b6.setEnabled(true);
        b6.setText(" ");
        b6.setBackground(Color.lightGray);
        //b7.setEnabled(true);
        b7.setText(" ");
        b7.setBackground(Color.lightGray);
        //b8.setEnabled(true);
        b8.setText(" ");
        b8.setBackground(Color.lightGray);
        //b9.setEnabled(true);
        b9.setText(" ");
        b9.setBackground(Color.lightGray);
    }
    
    private static void setButtonsNull(){
        b1.setEnabled(false);
        b2.setEnabled(false);
        b3.setEnabled(false);
        b4.setEnabled(false);
        b5.setEnabled(false);
        b6.setEnabled(false);
        b7.setEnabled(false);
        b8.setEnabled(false);
        b9.setEnabled(false);
        newGame.setEnabled(true);
    }
    
    private static boolean isDraw(){
        int x=0;
        for(int i=0;i<gameBoard.length;i++){
            for(int j = 0; j<gameBoard.length;j++){
                if(gameBoard[i][j] > 0){
                    x++;
                }
            }
    }
        if(x == 9){
            return true;
        }
        else
            return false;

    }
    
    public static void update(String fluff) throws IOException{
        if ("b1".equals(fluff))
        {
            gameBoard[0][0] = 2;
            b1.setText(opponent);
            b1.setEnabled(false);
            if(epicLose()){
                try {
                    setButtonsNull();
                    JOptionPane.showMessageDialog(null,"You lose!");
                    newGame.setEnabled(true);
                    jLabel6.setText("DISCONNECTED");
                    jLabel6.setForeground(Color.red);        
                    clientSocket.close();
                }
                // TODO add your handling code here:
                catch (IOException ex) {
                    Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }else if(isDraw()){
                setButtonsNull();
                JOptionPane.showMessageDialog(null,"It's a Tie!");
                newGame.setEnabled(true);
                jLabel6.setText("DISCONNECTED");
                jLabel6.setForeground(Color.red);
                clientSocket.close();
            }
            else{
            unlock();
            }
        }
        if ("b2".equals(fluff))
        {
            gameBoard[0][1] = 2;
            b2.setText(opponent);
            b2.setEnabled(false);
            if(epicLose()){
                try {
                    setButtonsNull();
                    JOptionPane.showMessageDialog(null,"You lose!");
                    newGame.setEnabled(true);
                    jLabel6.setText("DISCONNECTED");
                    jLabel6.setForeground(Color.red);        
                    clientSocket.close();
                }
                // TODO add your handling code here:
                catch (IOException ex) {
                    Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }else if(isDraw()){
                setButtonsNull();
                JOptionPane.showMessageDialog(null,"It's a Tie!");
                newGame.setEnabled(true);
                jLabel6.setText("DISCONNECTED");
                jLabel6.setForeground(Color.red);
                clientSocket.close();
            }
            else{
            unlock();
            }
        }
        if ("b3".equals(fluff))
        {
            gameBoard[0][2] = 2;
            b3.setText(opponent);
            b3.setEnabled(false);
            if(epicLose()){
                try {
                    setButtonsNull();
                    JOptionPane.showMessageDialog(null,"You lose!");
                    newGame.setEnabled(true);
                    jLabel6.setText("DISCONNECTED");
                    jLabel6.setForeground(Color.red);        
                    clientSocket.close();
                }
                // TODO add your handling code here:
                catch (IOException ex) {
                    Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }else if(isDraw()){
                setButtonsNull();
                JOptionPane.showMessageDialog(null,"It's a Tie!");
                newGame.setEnabled(true);
                jLabel6.setText("DISCONNECTED");
                jLabel6.setForeground(Color.red);
                clientSocket.close();
            }
            else{
            unlock();
            }
        }
        if ("b4".equals(fluff))
        {
            gameBoard[1][0] = 2;
            b4.setText(opponent);
            b4.setEnabled(false);
                        if(epicLose()){
                try {
                    setButtonsNull();
                    JOptionPane.showMessageDialog(null,"You lose!");
                    newGame.setEnabled(true);
                    jLabel6.setText("DISCONNECTED");
                    jLabel6.setForeground(Color.red);        
                    clientSocket.close();
                }
                // TODO add your handling code here:
                catch (IOException ex) {
                    Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }else if(isDraw()){
                setButtonsNull();
                JOptionPane.showMessageDialog(null,"It's a Tie!");
                newGame.setEnabled(true);
                jLabel6.setText("DISCONNECTED");
                jLabel6.setForeground(Color.red);
                clientSocket.close();
            }
            else{
            unlock();
            }
        }
        if ("b5".equals(fluff))
        {
            gameBoard[1][1] = 2;
            b5.setText(opponent);
            b5.setEnabled(false);
                        if(epicLose()){
                try {
                    setButtonsNull();
                    JOptionPane.showMessageDialog(null,"You lose!");
                    newGame.setEnabled(true);
                    jLabel6.setText("DISCONNECTED");
                    jLabel6.setForeground(Color.red);        
                    clientSocket.close();
                }
                // TODO add your handling code here:
                catch (IOException ex) {
                    Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }else if(isDraw()){
                setButtonsNull();
                JOptionPane.showMessageDialog(null,"It's a Tie!");
                newGame.setEnabled(true);
                jLabel6.setText("DISCONNECTED");
                jLabel6.setForeground(Color.red);
                clientSocket.close();
            }
            else{
            unlock();
            }
        }
        if ("b6".equals(fluff))
        {
            gameBoard[1][2] = 2;
            b6.setText(opponent);
            b6.setEnabled(false);
                        if(epicLose()){
                try {
                    setButtonsNull();
                    JOptionPane.showMessageDialog(null,"You lose!");
                    newGame.setEnabled(true);
                    jLabel6.setText("DISCONNECTED");
                    jLabel6.setForeground(Color.red);        
                    clientSocket.close();
                }
                // TODO add your handling code here:
                catch (IOException ex) {
                    Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }else if(isDraw()){
                setButtonsNull();
                JOptionPane.showMessageDialog(null,"It's a Tie!");
                newGame.setEnabled(true);
                jLabel6.setText("DISCONNECTED");
                jLabel6.setForeground(Color.red);
                clientSocket.close();
            }
            else{
            unlock();
            }
        }
        if ("b7".equals(fluff))
        {
            gameBoard[2][0] = 2;
            b7.setText(opponent);
            b7.setEnabled(false);
                        if(epicLose()){
                try {
                    setButtonsNull();
                    JOptionPane.showMessageDialog(null,"You lose!");
                    newGame.setEnabled(true);
                    jLabel6.setText("DISCONNECTED");
                    jLabel6.setForeground(Color.red);        
                    clientSocket.close();
                }
                // TODO add your handling code here:
                catch (IOException ex) {
                    Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }else if(isDraw()){
                setButtonsNull();
                JOptionPane.showMessageDialog(null,"It's a Tie!");
                newGame.setEnabled(true);
                jLabel6.setText("DISCONNECTED");
                jLabel6.setForeground(Color.red);
                clientSocket.close();
            }
            else{
            unlock();
            }
        }
        if ("b8".equals(fluff))
        {
            gameBoard[2][1] = 2;
            b8.setText(opponent);
            b8.setEnabled(false);
                        if(epicLose()){
                try {
                    setButtonsNull();
                    JOptionPane.showMessageDialog(null,"You lose!");
                    newGame.setEnabled(true);
                    jLabel6.setText("DISCONNECTED");
                    jLabel6.setForeground(Color.red);        
                    clientSocket.close();
                }
                // TODO add your handling code here:
                catch (IOException ex) {
                    Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }else if(isDraw()){
                setButtonsNull();
                JOptionPane.showMessageDialog(null,"It's a Tie!");
                newGame.setEnabled(true);
                jLabel6.setText("DISCONNECTED");
                jLabel6.setForeground(Color.red);
                clientSocket.close();
            }
            else{
            unlock();
            }
        }
        if ("b9".equals(fluff))
        {
            gameBoard[2][2] = 2;
            b9.setText(opponent);
            b9.setEnabled(false);
                        if(epicLose()){
                try {
                    setButtonsNull();
                    JOptionPane.showMessageDialog(null,"You lose!");
                    newGame.setEnabled(true);
                    jLabel6.setText("DISCONNECTED");
                    jLabel6.setForeground(Color.red);        
                    clientSocket.close();
                }
                // TODO add your handling code here:
                catch (IOException ex) {
                    Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }else if(isDraw()){
                setButtonsNull();
                JOptionPane.showMessageDialog(null,"It's a Tie!");
                newGame.setEnabled(true);
                jLabel6.setText("DISCONNECTED");
                jLabel6.setForeground(Color.red);
                clientSocket.close();
            }
            else{
            unlock();
            }
        }
        
    }
    
    public static void whosFirst(String incomingCoin) throws IOException{
        int otherCoin = Integer.parseInt(incomingCoin);
        if(coin>otherCoin){
            unlock();
        }else if(coin<otherCoin){
            lock();
            startButton.setEnabled(false);
        }else if(coin == otherCoin){
            coin = decider.nextInt(2);
            String stringCoin = Integer.toString(coin);
            sendOut.writeBytes(stringCoin);
        } 
    }
    
    public void establishNewConnection(){

        gameserver = new GameServer(Integer
                    .parseInt(server1PortTextField.getText()));
        try {
            clientSocket = new Socket(address, Integer
                        .parseInt(server2PortTextField.getText()));
        } catch (UnknownHostException ex) {
            Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(UDPChatJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        gameserver.start();
    }
    
public void playSound(String soundName)
 {
   try 
   {
    AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File(soundName).getAbsoluteFile( ));
    Clip clip = AudioSystem.getClip( );
    clip.open(audioInputStream);
    clip.start( );
   }
   catch(UnsupportedAudioFileException | IOException | LineUnavailableException ex)
   {
     System.out.println("Error with playing sound.");
   }
 }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UDPChatJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new UDPChatJFrame().setVisible(true);
            }    
        });
        
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JButton b1;
    private static javax.swing.JButton b2;
    private static javax.swing.JButton b3;
    private static javax.swing.JButton b4;
    private static javax.swing.JButton b5;
    private static javax.swing.JButton b6;
    private static javax.swing.JButton b7;
    private static javax.swing.JButton b8;
    private static javax.swing.JButton b9;
    public static javax.swing.JTextArea chatArea;
    public static javax.swing.JTextField chatTextBox;
    private javax.swing.JButton connectButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    public static javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nameTextField;
    private static javax.swing.JButton newGame;
    private javax.swing.JButton sendButton;
    private javax.swing.JTextField server1PortTextField;
    private javax.swing.JTextField server2PortTextField;
    private static javax.swing.JButton startButton;
    // End of variables declaration//GEN-END:variables


}
